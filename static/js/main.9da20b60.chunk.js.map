{"version":3,"sources":["getWeb3.js","constants.js","components/WorkflowStatus.js","components/Workflow.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","WORKFLOW","status","eventKey","isOnlyForOwner","nextMethod","WorkflowStatus","props","is_contract_owner","className","workflow_status","Workflow","registeringVotersSpan","App","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","setState","contract","deployedNetworkAddress","initialize","alert","error","getTransactionError","data","message","substr","split","length","replace","slice","JSON","parse","value","transactionError","Object","keys","reason","setAlert","variant","isAlertShown","subscribeContractEvents","state","events","VoterRegistered","event","loadValues","returnValues","voterAddress","WorkflowStatusChange","previousStatus","newStatus","ProposalRegistered","Voted","proposals","voter","parseInt","proposalId","description","VotesTallied","retrieveContractOwner","retrieveWorkflowStatus","workflowStatus","isContractOwner","retrieveRegisteredVotersAddresses","retrieveProposals","countNumberOfVotes","retrieveVoterAttributes","retrieveWinningProposalId","methods","getWorkflowStatus","call","result","owner","getRegisteredVotersAddresses","from","registeredVotersAddresses","getProposals","isRegisteredVoter","hasVoted","countVotes","winningProposalId","send","getWinningProposalId","isAddress","test","registerVoter","includes","addNewProposal","proposal","addProposal","vote","counter","forEach","voteCount","numberOfVotes","nextWorkflowStatus","confirm","method","this","style","display","justifyContent","Card","width","Header","Body","Form","Group","Control","type","id","ref","input","Button","onClick","ListGroup","Item","Table","striped","bordered","hover","map","index","key","proposalForm","votingForm","as","custom","isReadyToRender","nextStepButton","showAlert","Alert","show","onClose","dismissible","getContent","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9da20b60.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","export const WORKFLOW = [\r\n    {status: \"Registering Voters\", eventKey: \"registering-voters\", isOnlyForOwner: true, nextMethod: \"startProposalRegistration\"},\r\n    {status: \"Proposals Registration Started\", eventKey: \"proposals-registration\", isOnlyForOwner: false, nextMethod: \"endProposalRegistration\"},\r\n    {status: \"Proposals Registration Ended\", eventKey: \"proposals-registration\", isOnlyForOwner: null, nextMethod: \"startVotingSession\"},\r\n    {status: \"Voting Session Started\", eventKey: \"voting-session\", isOnlyForOwner: false, nextMethod: \"endVotingSession\"},\r\n    {status: \"Voting Session Ended\", eventKey: \"voting-session\", isOnlyForOwner: null, nextMethod: \"countVotes\"},\r\n    {status: \"Votes Tallied\", eventKey: \"votes-tallied\", isOnlyForOwner: false, nextMethod: null},\r\n]","import {WORKFLOW} from \"../constants\";\r\nimport React from \"react\";\r\n\r\nexport default function WorkflowStatus(props) {\r\n    if (props.is_contract_owner) {\r\n        return (\r\n            <p className={\"bg-info\"}>\r\n                Workflow status : {WORKFLOW[props.workflow_status].status}\r\n            </p>\r\n        )\r\n    } else {\r\n        return \"\"\r\n    }\r\n}","import {WORKFLOW} from \"../constants\";\r\nimport React from \"react\";\r\n\r\nexport default function Workflow(props) {\r\n    const registeringVotersSpan = props.is_contract_owner ? (<>\r\n            <span className={WORKFLOW[props.workflow_status].eventKey === 'registering-voters' ? \"text-primary\" : \"text-secondary\"}>\r\n                Registering Voters\r\n            </span>\r\n            <strong> > </strong>\r\n        </>) : \"\"\r\n\r\n    return (\r\n        <p>\r\n            {registeringVotersSpan}\r\n            <span className={WORKFLOW[props.workflow_status].eventKey === 'proposals-registration' ? \"text-primary\" : \"text-secondary\"}>\r\n                Proposals Registration\r\n            </span>\r\n            <strong> > </strong>\r\n            <span className={WORKFLOW[props.workflow_status].eventKey === 'voting-session' ? \"text-primary\" : \"text-secondary\"}>\r\n                Voting Session\r\n            </span>\r\n            <strong> > </strong>\r\n            <span className={WORKFLOW[props.workflow_status].eventKey === 'votes-tallied' ? \"text-primary\" : \"text-secondary\"}>\r\n                Votes Tallied\r\n            </span>\r\n        </p>\r\n    )\r\n}","import React, {Component} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Alert from 'react-bootstrap/Alert';\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nimport {WORKFLOW} from \"./constants\"\nimport WorkflowStatus from \"./components/WorkflowStatus\";\nimport Workflow from \"./components/Workflow\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            web3: null,\n            accounts: null,\n            contract: null,\n            alert: null,\n            isAlertShown: false,\n            workflowStatus: null,\n            winningProposalId: null,\n            registeredVotersAddresses: null,\n            isContractOwner: false,\n            proposals: null,\n            isRegisteredVoter: null,\n            hasVoted: null,\n            numberOfVotes: null,\n            owner: null,\n            deployedNetwork: null\n        }\n    }\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = VotingContract.networks[networkId];\n            const instance = new web3.eth.Contract(\n                VotingContract.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance,\n                deployedNetworkAddress: deployedNetwork.address\n            }, this.initialize);\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n    };\n\n    /**\n     * A transaction can return an error\n     * This method retrieve the error object of this transaction\n     *\n     * @param error\n     * @returns {{reason: string}|*}\n     */\n    getTransactionError = function (error) {\n        let message = error.message // error.message is a text\n\n        message = message\n          .substr(message.split('{')[0].length)\n          .replace(/\\n/g, \"\")\n\n        if (message.slice(-1) === \"'\") {\n            message = message.slice(0, -1)\n        }\n\n        error = JSON.parse(message)\n\n        let data\n        // errors don't have same structure !\n        if (error.value && error.value.data && error.value.data.data) {\n            data = error.value.data.data\n        }\n\n        if (!data && error.data) {\n            data = error.data\n        }\n\n        if (data) {\n            const txHash = Object.keys(data)[0];\n            const transactionError = data[txHash]\n            if (transactionError) {\n                return transactionError\n            }\n        }\n\n        return { reason: error }\n    }\n\n    setAlert = (variant, message) => {\n        this.setState({\n            alert:\n                {\n                    variant: variant,\n                    message: message\n                },\n            isAlertShown: true\n        })\n    }\n\n    subscribeContractEvents = () => {\n        const { contract } = this.state;\n\n        contract.events.VoterRegistered(async (error, event) => {\n            if (!error) {\n                await this.loadValues()\n                this.setAlert(\"success\", `New registered voter with address ${event.returnValues.voterAddress}`)\n\n                return\n            }\n\n            console.error(error)\n        })\n        contract.events.WorkflowStatusChange(async (error, event) => {\n            if (!error) {\n                await this.loadValues()\n                this.setAlert(\"success\", `Workflow Status Change from \"${WORKFLOW[event.returnValues.previousStatus].status}\" to \"${WORKFLOW[event.returnValues.newStatus].status}\"`)\n\n                return\n            }\n\n            console.error(error)\n        })\n        contract.events.ProposalRegistered(async (error, event) => {\n            if (!error) {\n                await this.loadValues()\n                this.setAlert(\"success\", \"New registered proposal\")\n\n                return\n            }\n\n            console.error(error)\n        })\n        contract.events.Voted(async (error, event) => {\n            if (!error) {\n                await this.loadValues()\n                const { proposals } = this.state\n                this.setAlert(\"success\", `Address ${event.returnValues.voter} vote for proposal \"${proposals[parseInt(event.returnValues.proposalId)].description}\"`)\n\n                return\n            }\n\n            console.error(error)\n        })\n        contract.events.VotesTallied(async (error, event) => {\n            if (!error) {\n                await this.loadValues()\n                this.setAlert(\"success\", \"Votes tallied\")\n\n                return\n            }\n\n            console.error(error)\n        })\n    }\n\n    initialize = async () => {\n        this.subscribeContractEvents()\n        await this.loadValues()\n    }\n\n    loadValues = async () => {\n        await this.retrieveContractOwner()\n        await this.retrieveWorkflowStatus()\n\n        const { workflowStatus, isContractOwner } = this.state;\n\n        if (WORKFLOW[workflowStatus].status === \"Registering Voters\") {\n            await this.retrieveRegisteredVotersAddresses()\n            if (!isContractOwner) {\n                this.setAlert(\"warning\", \"You are not allowed to register voters\")\n            }\n        }\n\n        if (WORKFLOW[workflowStatus].status === \"Proposals Registration Started\"\n            || WORKFLOW[workflowStatus].status === \"Proposals Registration Ended\"\n        ) {\n            await this.retrieveProposals()\n        }\n\n        if (WORKFLOW[workflowStatus].status === \"Voting Session Started\"\n            || WORKFLOW[workflowStatus].status === \"Voting Session Ended\"\n        ) {\n            await this.retrieveProposals()\n            await this.countNumberOfVotes()\n            await this.retrieveVoterAttributes()\n        }\n\n        if (WORKFLOW[workflowStatus].status === \"Votes Tallied\") {\n            await this.retrieveProposals()\n            await this.retrieveWinningProposalId()\n            await this.countNumberOfVotes()\n        }\n    }\n\n    retrieveWorkflowStatus = async () => {\n        const { contract } = this.state;\n\n        try {\n            const result = await contract.methods.getWorkflowStatus().call()\n            this.setState({ workflowStatus: result });\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    };\n\n    retrieveContractOwner = async () => {\n        const { contract, accounts } = this.state;\n\n        try {\n            const result = await contract.methods.owner().call()\n\n            this.setState({\n                isContractOwner: result === accounts[0],\n                owner: result\n            });\n\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    };\n\n    retrieveRegisteredVotersAddresses = async() => {\n        const { contract, accounts } = this.state\n\n        try {\n            const registeredVotersAddresses = await contract.methods.getRegisteredVotersAddresses().call({from: accounts[0]}) // on doit spécifier l'adresse car la fonction a le modifier onlyOwner\n\n            this.setState({ registeredVotersAddresses: registeredVotersAddresses })\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    }\n\n    retrieveProposals = async() => {\n        const { contract } = this.state\n\n        try {\n            const proposals = await contract.methods.getProposals().call()\n\n            this.setState({ proposals: proposals })\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    };\n\n    retrieveVoterAttributes = async() => {\n        const { contract, accounts } = this.state;\n\n        try {\n            const isRegisteredVoter = await contract.methods.isRegisteredVoter(accounts[0]).call();\n            this.setState({ isRegisteredVoter: isRegisteredVoter });\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n\n        try {\n            const hasVoted = await contract.methods.hasVoted(accounts[0]).call();\n\n            this.setState({ hasVoted: hasVoted });\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    };\n\n    countVotes = async() => {\n        const { accounts, contract, workflowStatus, winningProposalId } = this.state;\n\n        if (WORKFLOW[workflowStatus].status !== \"Voting Session Ended\") {\n            this.setAlert(\"warning\", \"Impossible count\")\n\n            return\n        }\n\n        if (!winningProposalId) {\n            this.setAlert(\"warning\", \"Already count\")\n\n            return\n        }\n\n        try {\n            await contract.methods.countVotes().send({from: accounts[0]});\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    }\n\n    retrieveWinningProposalId = async() => {\n        const { contract } = this.state\n\n        try {\n            const winningProposalId = await contract.methods.getWinningProposalId().call()\n\n            this.setState({ winningProposalId: winningProposalId })\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    };\n\n    /**\n     * Checks if the given string is an address\n     *\n     * @method isAddress\n     * @param {String} address the given HEX address\n     * @return {Boolean}\n     */\n    isAddress = (address) => {\n        return (/^(0x)?[0-9a-fA-F]{40}$/i.test(address))\n    }\n\n    registerVoter = async() => {\n        const { accounts, contract, registeredVotersAddresses } = this.state;\n        const address = this.address.value;\n\n        if (!this.isAddress(address)) {\n            this.setAlert(\"warning\", \"Invalid address\")\n\n            return\n        }\n\n        if (registeredVotersAddresses.includes(address)) {\n            this.setAlert(\"warning\", \"Voter already registered\")\n\n            return\n        }\n\n        try {\n            await contract.methods.registerVoter(address).send({from: accounts[0]})\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    }\n\n    addNewProposal = async() => {\n        const { accounts, contract, proposals, workflowStatus } = this.state\n        const proposal = this.proposal.value;\n\n        if (WORKFLOW[workflowStatus].status !== \"Proposals Registration Started\") {\n            this.setAlert(\"warning\", \"Proposals Registration is closed\")\n\n            return\n        }\n\n        if (proposals.includes(proposal)) {\n            this.setAlert(\"warning\", \"Voter already registered\")\n\n            return\n        }\n\n        try {\n            await contract.methods.addProposal(proposal).send({from: accounts[0]});\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    }\n\n    vote = async() => {\n        const { accounts, contract, workflowStatus, isRegisteredVoter, hasVoted } = this.state\n        const proposalId = parseInt(this.proposalId.value);\n\n        if (WORKFLOW[workflowStatus].status !== \"Voting Session Started\") {\n            this.setAlert(\"warning\", \"Voting Session is closed\")\n\n            return\n        }\n\n        if (!isRegisteredVoter) {\n            this.setAlert(\"warning\", \"You are not registered\")\n\n            return\n        }\n\n        if (hasVoted) {\n            this.setAlert(\"warning\", \"Voter already vote\")\n\n            return\n        }\n\n        try {\n            await contract.methods.vote(proposalId).send({from: accounts[0]});\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    }\n\n    countNumberOfVotes = () => {\n        const { proposals } = this.state\n\n        let counter = 0\n        proposals.forEach((proposal) => {\n            counter += parseInt(proposal.voteCount)\n        })\n\n        this.setState({ numberOfVotes: counter })\n    }\n\n    nextWorkflowStatus = async() => {\n        const { accounts, contract, workflowStatus, proposals } = this.state;\n\n        if (!window.confirm( `Are you finished this step and go to next step : ${WORKFLOW[parseInt(workflowStatus) + 1].status} ?`)) {\n            return\n        }\n\n        const method = WORKFLOW[workflowStatus].nextMethod\n\n        if (WORKFLOW[workflowStatus].status === \"Proposals Registration Started\" && !proposals) {\n            this.setAlert(\"danger\", \"Waiting for one proposal\")\n\n            return\n        }\n\n        try {\n            await contract.methods[method]().send({from: accounts[0]})\n        } catch (error) {\n            this.setAlert(\"danger\", this.getTransactionError(error).reason)\n        }\n    }\n\n    getContent() {\n        switch (WORKFLOW[this.state.workflowStatus].eventKey) {\n            case 'registering-voters':\n                if (this.state.isContractOwner) {\n                    return (<>\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                            <Card style={{width: '50rem'}}>\n                                <Card.Header><strong>Register a new voter</strong></Card.Header>\n                                <Card.Body>\n                                    <Form.Group>\n                                        <Form.Control type=\"text\" id=\"address\"\n                                                      ref={(input) => {\n                                                          this.address = input\n                                                      }}\n                                        />\n                                    </Form.Group>\n                                    <Button onClick={this.registerVoter} variant=\"dark\"> Register </Button>\n                                </Card.Body>\n                            </Card>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                            <Card style={{width: '50rem'}}>\n                                <Card.Header><strong>Registered voters list</strong></Card.Header>\n                                <Card.Body>\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <Table striped bordered hover>\n                                                <thead>\n                                                <tr>\n                                                    <th>@</th>\n                                                </tr>\n                                                </thead>\n                                                <tbody>\n                                                {this.state.registeredVotersAddresses !== null &&\n                                                this.state.registeredVotersAddresses.map((address, index) => <tr key={`${index}`}>\n                                                    <td>{address}</td>\n                                                </tr>)\n                                                }\n                                                </tbody>\n                                            </Table>\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Card.Body>\n                            </Card>\n                        </div>\n                    </>)\n                } else {\n                    return \"\"\n                }\n            case 'proposals-registration':\n                const proposalForm = WORKFLOW[this.state.workflowStatus].status === \"Proposals Registration Started\"\n                    ?   (\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                            <Card style={{width: '50rem'}}>\n                                <Card.Header><strong>Add a new proposal</strong></Card.Header>\n                                <Card.Body>\n                                    <Form.Group>\n                                        <Form.Control type=\"text\" id=\"proposal\"\n                                                      ref={(input) => {\n                                                          this.proposal = input\n                                                      }}\n                                        />\n                                    </Form.Group>\n                                    <Button onClick={this.addNewProposal} variant=\"dark\"> Add </Button>\n                                </Card.Body>\n                            </Card>\n                        </div>\n                    ) : (<></>)\n\n                return (<>\n                    {proposalForm}\n                    <br/>\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\n                        <Card style={{width: '50rem'}}>\n                            <Card.Header><strong>Proposals list</strong></Card.Header>\n                            <Card.Body>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item>\n                                        <Table striped bordered hover>\n                                            <tbody>\n                                            {this.state.proposals !== null &&\n                                            this.state.proposals.map(({description}, index) => <tr key={`${index}`}>\n                                                <td>{description}</td>\n                                            </tr>)\n                                            }\n                                            </tbody>\n                                        </Table>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </>)\n            case 'voting-session':\n                const votingForm = WORKFLOW[this.state.workflowStatus].status === \"Voting Session Started\"\n                    ?   (<>\n                        <Form.Control\n                            as=\"select\"\n                            custom=\"true\"\n                            ref={(input) => {\n                                this.proposalId = input\n                            }}\n                        >\n                            <option>Choose one proposal</option>\n                            {this.state.proposals !== null\n                            && this.state.proposals.map(({description}, index) => <option key={`${index}`} value={`${index}`}> {description} </option>)}\n                        </Form.Control>\n                        <Button onClick={this.vote} variant=\"primary\" type=\"submit\"> Submit </Button>\n                    </>) : (<></>)\n\n                return (<>\n                    <p>Number of votes : <strong>{this.state.numberOfVotes}</strong></p>\n                    {votingForm}\n                </>)\n            case 'votes-tallied':\n                return (<>\n                    <h2>Proposal winner</h2>\n                    <p>And the winner is <br/>\n                        <strong>{this.state.proposals[this.state.winningProposalId].description}</strong><br/>\n                        with <strong>{this.state.proposals[this.state.winningProposalId].voteCount}</strong> votes / {this.state.numberOfVotes} !\n                    </p>\n                </>)\n            default:\n                return \"\"\n        }\n\n    }\n\n    render() {\n        const {\n            registeredVotersAddresses,\n            workflowStatus,\n            isContractOwner,\n            proposals,\n            winningProposalId,\n            alert,\n            isAlertShown\n        } = this.state\n\n        let isReadyToRender = false\n        if (workflowStatus) {\n            switch (WORKFLOW[workflowStatus].status) {\n                case 'Registering Voters':\n                    isReadyToRender = registeredVotersAddresses && true\n                    break;\n                case 'Proposals Registration Started':\n                case 'Proposals Registration Ended':\n                case 'Voting Session Started':\n                case 'Voting Session Ended':\n                    isReadyToRender = proposals && true\n                    break;\n                case 'Votes Tallied':\n                    isReadyToRender = proposals && winningProposalId\n                    break;\n                default:\n            }\n        }\n\n        if (!isReadyToRender) {\n            return <p>Loading Web3, accounts, and contract...\n                {/*<br />*/}\n                {/*Owner is \"{owner}\"<br />*/}\n                {/*deployed network address : {deployedNetworkAddress}<br />*/}\n                {/*accounts : {Array.isArray(accounts) ? JSON.stringify(accounts) : \"\"}*/}\n            </p>;\n        }\n\n        const nextStepButton = (\n            <Button onClick={this.nextWorkflowStatus} variant=\"dark\"> > Next workflow step > </Button>\n        )\n\n        const showAlert = isAlertShown\n            ? (\n                <>\n                    <Alert show={isAlertShown} variant={alert.variant} onClose={() => this.setState({isAlertShown: false})} dismissible>\n                        <p>\n                            {alert.message}\n                        </p>\n                    </Alert>\n                </>\n            )\n            : (<></>)\n\n        return (\n            <div className=\"App\">\n                <div style={{width: '50rem'}} className={\"mx-auto\"}>\n                    <h1>Voting app</h1>\n                    {showAlert}\n                    <WorkflowStatus workflow_status={workflowStatus} is_contract_owner={isContractOwner}/>\n                    {(isContractOwner && workflowStatus < WORKFLOW.length - 1 ) ? nextStepButton : \"\"}\n                    <Workflow workflow_status={workflowStatus} is_contract_owner={isContractOwner}/>\n                    {this.getContent()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}